package com.vladris.poke;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
{%- set args = "T" + range(1, types + 1) | join(", T") %}

public class Variant{{ types }}Test {
{%- for i in range(1, types + 1) %}
    class T{{ i }} { }
{% endfor %}

{%- for i in range(1, types + 1) %}
    @Test
    public void variantNewTest{{ i }}() {
        T{{ i }} value = new T{{ i }}();
        Variant{{ types }}<{{ args }}> variant = new Variant{{ types }}<{{ args }}>(value);

        assertEquals({{ i - 1 }}, variant.getIndex());
        assertEquals(value, variant.get());
    }

    @Test
    public void variantMakeTest{{ i }}() {
        T{{ i }} value = new T{{ i }}();
        Variant{{ types }}<{{ args }}> variant = Variant{{ types }}.make{{ i }}(value);

        assertEquals({{ i - 1 }}, variant.getIndex());
        assertEquals(value, variant.get());
    }

    @Test
    public void variantSetTest{{ i }}() {
        T{{ i }} value = new T{{ i }}();
        T{{ i }} value2 = new T{{ i }}();
        Variant{{ types }}<{{ args }}> variant = Variant{{ types }}.make{{ i }}(value);
        variant.set(value2);

        assertNotEquals(value, variant.get());
        assertEquals(value2, variant.get());
    }

    @Test
    public void variantApplyTest{{ i }}() {
        Variant{{ types }}<{{ args }}> variant = Variant{{ types }}.make{{ i }}(new T{{ i }}());

        int result = variant.apply(
{%- for i in range(1, types + 1) %}
            (arg) -> {{ i }}{{ "," if i < types else ");" }}
{%- endfor %}

        assertEquals({{ i }}, result);

        // apply overload with Consumer
        variant.apply(
{%- for j in range(1, types + 1) %}
            (arg) -> { {{ "fail(\"Shouldn't be called\");" if j != i else "" }} }{{ "," if j < types else ");" }}
{%- endfor %}
    }

    @Test
    public void variantMapTest{{ i }}() {
        Variant{{ types }}<{{ args }}> variant = Variant{{ types }}.make{{ i }}(new T{{ i }}());

        Variant{{ types }}<{{ args }}> result = variant.map(
{%- for i in range(1, types + 1) %}
            (arg) -> arg{{ "," if i < types else ");" }}
{%- endfor %}

        assertEquals({{ i - 1 }}, result.getIndex());
    }
{% endfor %}
}